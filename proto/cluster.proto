syntax = "proto3";

package cluster;

service ClusterRpc {
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    rpc GetNodes(Empty) returns (NodeList);
    rpc SyncData(SyncRequest) returns (SyncResponse);
    rpc RequestVote(ElectionRequest) returns (ElectionResponse);
    rpc ReplicateData(ReplicationRequest) returns (ReplicationResponse);
    rpc GetData(DataRequest) returns (DataResponse);
}

message Empty {}

message HeartbeatRequest {
    string node_id = 1;
    float cpu_load = 2;
    float memory_load = 3;
    uint32 connections = 4;
    int64 timestamp = 5;
}

message HeartbeatResponse {
    bool success = 1;
    string leader_id = 2;
    int64 cluster_time = 3;
}

message NodeStatus {
    string node_id = 1;
    string address = 2;
    string state = 3;
    string role = 4;
    float cpu_load = 5;
    float memory_load = 6;
    uint32 connections = 7;
    uint64 last_seen = 8;
}

message NodeList {
    repeated NodeStatus nodes = 1;
}

message SyncRequest {
    string node_id = 1;
    uint64 last_sync_version = 2;
    repeated string keys = 3;
}

message SyncResponse {
    bool success = 1;
    uint64 data_version = 2;
    uint32 items_synced = 3;
}

message ElectionRequest {
    uint64 term = 1;
    string candidate_id = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

message ElectionResponse {
    uint64 term = 1;
    bool vote_granted = 2;
    string voter_id = 3;
}

message ReplicationRequest {
    string key = 1;
    bytes data = 2;
    uint32 replica_count = 3;
    uint64 version = 4;
}

message ReplicationResponse {
    bool success = 1;
    uint32 replicas_confirmed = 2;
    uint64 replication_time_ms = 3;
}

message DataRequest {
    string key = 1;
    bool include_metadata = 2;
}

message DataResponse {
    bool found = 1;
    bytes value = 2;
    uint64 version = 3;
    string owner_node = 4;
}